@startuml
note as DefinitionNote
defines {
    def int a = 0;
    def int b = 0;
    def int round_count = 0;
}
end note

state TrafficLight {
    state InService {
        state Red
        Red : during {\n    a = 1 << 2;\n}
        state Yellow
        state Green
        [*] --> Red : Start
        note on link
        effect {
            b = 1;
        }
        end note
        Red --> Green
        note on link
        effect {
            b = 3;
        }
        end note
        Green --> Yellow
        note on link
        effect {
            b = 2;
        }
        end note
        Yellow --> Red : a >= 10
        note on link
        effect {
            b = 1;
            round_count = round_count + 1;
        }
        end note
    }
    InService : enter {\n    a = 0;\n    b = 0;\n    round_count = 0;\n}\nenter abstract InServiceAbstractEnter /*\n    Abstract Operation When Entering State 'InService'\n    TODO: Should be Implemented In Generated Code Framework\n*/\nduring before abstract InServiceBeforeEnterChild /*\n    Abstract Operation Before Entering Child States of State 'InService'\n    TODO: Should be Implemented In Generated Code Framework\n*/\nduring after abstract InServiceAfterEnterChild /*\n    Abstract Operation After Entering Child States of State 'InService'\n    TODO: Should be Implemented In Generated Code Framework\n*/\nexit abstract InServiceAbstractExit /*\n    Abstract Operation When Leaving State 'InService'\n    TODO: Should be Implemented In Generated Code Framework\n*/
    state Idle
    [*] --> InService
    InService --> Idle : InService.Maintain
    Idle --> [*]
}
[*] --> TrafficLight
TrafficLight --> [*]
@enduml