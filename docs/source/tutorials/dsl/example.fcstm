def int a = 0;
def int b = 0x0;
def int round_count = 0;
state TrafficLight {
    state InService {
        enter {
            a = 0;
            b = 0;
            round_count = 0;
        }
        enter abstract InServiceAbstractEnter /*
            Abstract Operation When Entering State 'InService'
            TODO: Should be Implemented In Generated Code Framework
        */
        during before abstract InServiceBeforeEnterChild /*
            Abstract Operation Before Entering Child States of State 'InService'
            TODO: Should be Implemented In Generated Code Framework
        */
        during after abstract InServiceAfterEnterChild /*
            Abstract Operation After Entering Child States of State 'InService'
            TODO: Should be Implemented In Generated Code Framework
        */
        exit abstract InServiceAbstractExit /*
            Abstract Operation When Leaving State 'InService'
            TODO: Should be Implemented In Generated Code Framework
        */
        state Red {
            during {
                a = 0x1 << 2;
            }
        }
        state Yellow;
        state Green;
        [*] -> Red :: Start effect {
            b = 0x1;
        }
        Red -> Green effect {
            b = 0x3;
        }
        Green -> Yellow effect {
            b = 0x2;
        }
        Yellow -> Red : if [a >= 10] effect {
            b = 0x1;
            round_count = round_count + 1;
        }
    }
    state Idle;
    [*] -> InService;
    InService -> Idle :: Maintain;
    Idle -> [*];
}
